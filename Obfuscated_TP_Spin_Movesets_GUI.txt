
local xnGcdMxVFPH = [[-- Services
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local players = game:GetService("Players")

-- Variables
local player = players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local spinning = false
local angle = 0

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Create GUI
local gui = Instance.new("ScreenGui")
gui.Name = "FarmGui"
gui.Parent = game.CoreGui -- Prevents GUI from being removed on death

-- Main Frame
local mainFrame = Instance.new("Frame", gui)
mainFrame.Size = UDim2.new(0, 250, 0, 220)
mainFrame.Position = UDim2.new(0.5, -125, 0.4, 0)
mainFrame.BackgroundTransparency = 0.5
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true

-- UI Corner for Round Outline
local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 15)

-- Background Image
local background = Instance.new("ImageLabel", mainFrame)
background.Size = UDim2.new(1, 0, 1, 0)
background.Position = UDim2.new(0, 0, 0, 0)
background.Image = "rbxassetid://127422567893171"
background.BackgroundTransparency = 1
background.ZIndex = 1
background.ScaleType = Enum.ScaleType.Stretch

-- UI Corner for Background Image
local mainCorner = Instance.new("UICorner", background)
mainCorner.CornerRadius = UDim.new(0, 15)

-- User Input Box
local userInput = Instance.new("TextBox", mainFrame)
userInput.Size = UDim2.new(0, 200, 0, 25)
userInput.Position = UDim2.new(0.5, -100, 0.05, 0)
userInput.PlaceholderText = "Enter Target Username"
userInput.Text = ""
userInput.BackgroundTransparency = 1
userInput.TextColor3 = Color3.fromRGB(0, 255, 0)
userInput.ClearTextOnFocus = false
userInput.TextScaled = true
userInput.ZIndex = 2

-- UI Corner for Input Box
local inputCorner = Instance.new("UICorner", userInput)
inputCorner.CornerRadius = UDim.new(0, 10)

-- Background Image for UserInput
local inputBackground = Instance.new("ImageLabel", mainFrame)
inputBackground.Size = userInput.Size
inputBackground.Position = userInput.Position
inputBackground.Image = "rbxassetid://85161319699165"
inputBackground.BackgroundTransparency = 1
inputBackground.ZIndex = 1
inputBackground.ScaleType = Enum.ScaleType.Stretch

-- UI Corner for Background Image
local imageCorner = Instance.new("UICorner", inputBackground)
imageCorner.CornerRadius = UDim.new(0, 10)

-- TP Spin Button
local tpSpinButton = Instance.new("TextButton", mainFrame)
tpSpinButton.Size = UDim2.new(0, 200, 0, 25)
tpSpinButton.Position = UDim2.new(0.5, -100, 0.2, 0)
tpSpinButton.Text = "TP Spin"
tpSpinButton.BackgroundTransparency = 1
tpSpinButton.TextColor3 = Color3.fromRGB(255, 255, 255)
tpSpinButton.TextScaled = true
tpSpinButton.ZIndex = 2

-- UI Corner for TP Spin Button
local buttonCorner = Instance.new("UICorner", tpSpinButton)
buttonCorner.CornerRadius = UDim.new(0, 10)

-- Background Image for TP Spin Button
local tpSpinBackground = Instance.new("ImageLabel", mainFrame)
tpSpinBackground.Size = tpSpinButton.Size
tpSpinBackground.Position = tpSpinButton.Position
tpSpinBackground.Image = "rbxassetid://83216816502146"
tpSpinBackground.BackgroundTransparency = 1
tpSpinBackground.ZIndex = 1
tpSpinBackground.ScaleType = Enum.ScaleType.Stretch

-- UI Corner for Background Image
local imageCorner = Instance.new("UICorner", tpSpinBackground)
imageCorner.CornerRadius = UDim.new(0, 10)

-- CamLock Button
local camLockButton = Instance.new("TextButton", mainFrame)
camLockButton.Size = UDim2.new(0, 200, 0, 25)
camLockButton.Position = UDim2.new(0.5, -100, 0.35, 0)
camLockButton.Text = "CamLock: Off"
camLockButton.BackgroundTransparency = 1
camLockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
camLockButton.TextScaled = true
camLockButton.ZIndex = 2

-- UI Corner for CamLock Button
local camLockCorner = Instance.new("UICorner", camLockButton)
camLockCorner.CornerRadius = UDim.new(0, 10)

-- Background Image for CamLock Button (Parent to mainFrame)
local camLockBackground = Instance.new("ImageLabel", mainFrame)
camLockBackground.Size = camLockButton.Size
camLockBackground.Position = camLockButton.Position
camLockBackground.Image = "rbxassetid://83216816502146"
camLockBackground.BackgroundTransparency = 1
camLockBackground.ZIndex = 1 -- Place it behind the button
camLockBackground.ScaleType = Enum.ScaleType.Stretch

-- UI Corner for Background Image
local camLockImageCorner = Instance.new("UICorner", camLockBackground)
camLockImageCorner.CornerRadius = UDim.new(0, 10)

-- Movesets Button
local movesetsButton = Instance.new("TextButton", mainFrame)
movesetsButton.Size = UDim2.new(0, 200, 0, 25)
movesetsButton.Position = UDim2.new(0.5, -100, 0.7, 0)
movesetsButton.Text = "Movesets"
movesetsButton.BackgroundTransparency = 1
movesetsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
movesetsButton.TextScaled = true
movesetsButton.ZIndex = 2

-- UI Corner for Movesets Button
local movesetsCorner = Instance.new("UICorner", movesetsButton)
movesetsCorner.CornerRadius = UDim.new(0, 10)

-- Background for Movesets Button
local movesetsBackground = Instance.new("ImageLabel", mainFrame)
movesetsBackground.Size = movesetsButton.Size
movesetsBackground.Position = movesetsButton.Position
movesetsBackground.Image = "rbxassetid://82331533530166"
movesetsBackground.BackgroundTransparency = 1
movesetsBackground.ZIndex = 1 -- Behind button
movesetsBackground.ScaleType = Enum.ScaleType.Stretch

-- Movesets Background Corner
local imageCorner = Instance.new("UICorner", movesetsBackground)
imageCorner.CornerRadius = UDim.new(0, 10)

-- Destroy GUI Button (Moved Up More)
local destroyButton = Instance.new("TextButton", mainFrame)
destroyButton.Size = UDim2.new(0, 200, 0, 25)
destroyButton.Position = UDim2.new(0.5, -100, 0.55, 0)
destroyButton.Text = "Destroy GUI"
destroyButton.BackgroundTransparency = 1
destroyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
destroyButton.TextScaled = true
destroyButton.ZIndex = 2

-- UI Corner for Destroy Button
local destroyCorner = Instance.new("UICorner", destroyButton)
destroyCorner.CornerRadius = UDim.new(0, 10)

-- Background Image for Destroy Button
local destroyBackground = Instance.new("ImageLabel", mainFrame)
destroyBackground.Size = destroyButton.Size
destroyBackground.Position = destroyButton.Position
destroyBackground.Image = "rbxassetid://140612563385497"
destroyBackground.BackgroundTransparency = 1
destroyBackground.ZIndex = 1
destroyBackground.ScaleType = Enum.ScaleType.Stretch

-- UI Corner for Background Image
local imageCornerDestroy = Instance.new("UICorner", destroyBackground)
imageCornerDestroy.CornerRadius = UDim.new(0, 10)

-- Click to Target Button (Moved Down More)
local clickToTargetButton = Instance.new("TextButton", mainFrame)
clickToTargetButton.Size = UDim2.new(0, 200, 0, 25)
clickToTargetButton.Position = UDim2.new(0.5, -100, 0.85, 0)
clickToTargetButton.Text = "Click to Target: OFF"
clickToTargetButton.BackgroundTransparency = 1
clickToTargetButton.TextColor3 = Color3.fromRGB(255, 255, 255)
clickToTargetButton.TextScaled = true
clickToTargetButton.ZIndex = 2

-- UI Corner for Click to Target Button
local clickToTargetCorner = Instance.new("UICorner", clickToTargetButton)
clickToTargetCorner.CornerRadius = UDim.new(0, 10)

-- Background Image for Click to Target Button
local clickToTargetBackground = Instance.new("ImageLabel", mainFrame)
clickToTargetBackground.Size = clickToTargetButton.Size
clickToTargetBackground.Position = clickToTargetButton.Position
clickToTargetBackground.Image = "rbxassetid://90599419811596"
clickToTargetBackground.BackgroundTransparency = 1
clickToTargetBackground.ZIndex = 1
clickToTargetBackground.ScaleType = Enum.ScaleType.Stretch

-- UI Corner for Background Image
local clickToTargetImageCorner = Instance.new("UICorner", clickToTargetBackground)
clickToTargetImageCorner.CornerRadius = UDim.new(0, 10)

-- Function to Load RayField UI for Movesets
local function loadMovesetsUI()
    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
    if not Rayfield then
        warn("Rayfield UI failed to load!")
        return
    end

    -- Create Movesets GUI Window
    local Window = Rayfield:CreateWindow({
        Name = "Movesets GUI",
        LoadingTitle = "Loading Movesets...",
        LoadingSubtitle = "By Mark22028",
        ConfigurationSaving = {
            Enabled = false
        },
        KeySystem = false
    })

    -- Create a Movesets Tab
    local MovesetsTab = Window:CreateTab("Movesets", 4483362458)

    -- Moveset List
    local movesets = {
        { "Trashcan Man(Any)", "https://raw.githubusercontent.com/yes1nt/yes/refs/heads/main/Trashcan%20Man" },
        { "Naruto (Saitama)", "https://raw.githubusercontent.com/LolnotaKid/NarutoBeatUpSasukeAss/refs/heads/main/NarutoCums" },
        { "Choi Jong (Saitama)", "https://raw.githubusercontent.com/nil071n/fireman/refs/heads/main/TSB" },
        { "Deku (Martial Artist)", "https://github.com/aggiealledge/obfuscated-scripts/raw/refs/heads/main/deku%20suiryu%20thingy.txt" },
        { "Luffy (Saitama)", "https://github.com/aggiealledge/obfuscated-scripts/raw/refs/heads/main/Protected_7732857839120517.txt" },
        { "Angel V1.0 (Hero Hunter)", "https://gist.githubusercontent.com/GoldenHeads2/93ddb1b1e2935bc76fbc37aae8985ad2/raw/47dfa45e1e8f1933a1c031b198d40c3cd1499fa2/gistfile1.txt" },
        { "Sukuna (Saitama)", "https://raw.githubusercontent.com/damir512/sukunasaitamav1/main/thescript" },
        { "Toji (Blade Master)", "https://pastebin.com/raw/cAsKbajr" },
        { "1x1x1x1 (Deadly Ninja)", "https://gist.githubusercontent.com/GoldenHeads2/900e87ffc32f3c740930ccb106dd6abf/raw/358c5bf0f0a6aa25946718288dab006e3ae7e1d4/gistfile1.txt" },
        { "Sung Jin Woo (Saitama)", "https://rawscripts.net/raw/The-Strongest-Battlegrounds-Sung-Jin-Woo-Moveset-30600" },
        { "Chainsaw Man (Deadly Ninja)", "https://gist.githubusercontent.com/GoldenHeads2/0fd8d36993c850f3fac89e5adf793076/raw/ab4f5a42bd0b2e24a32a46301d533ea849ca771c/gistfile1.txt" },
        { "Gojo Satoru V2 (Saitama)", "https://raw.githubusercontent.com/damir512/jjsgojov3/main/SaitamaToGojoV3_SOURCE-obfuscated_2.txt" },
        { "Star Glitcher (GUI)", "https://paste.ee/r/mmQkO" },
        { "Vexor (Saitama)", "https://raw.githubusercontent.com/Reapvitalized/TSB/refs/heads/main/VEXOR.lua" },
        { "VHS Sans (Saitama)", "https://paste.ee/r/rF9d3" },
        { "Sonic (Hero Hunter)", "https://pastebin.com/raw/7V1mUBtQ" },
        { "Mahoraga (Saitama)", "https://raw.githubusercontent.com/RXScript/RX-GUI-Version-1/refs/heads/main/Saitama%20To%20Mahoraga%20Moveset" },
        { "Geto (Hero Hunter)", "https://paste.ee/r/70OTE" },
        { "Kratos (Brutal Demon)", "https://raw.githubusercontent.com/Nova2ezz/Kratoss/refs/heads/main/moveset" },
        { "Dark Lord (Blade Master)", "https://raw.githubusercontent.com/Qaiddanial2904/Main/refs/heads/main/Dark%20lord" },
        { "UltraKillV1 (Hero Hunter)", "https://raw.githubusercontent.com/Nova2ezz/GarouToV1/refs/heads/main/GarouToV1.txt" },
        { "AKAZA (Hero Hunter)", "https://raw.githubusercontent.com/Nova2ezz/AkazaByNovahitta-Nova2ezz/refs/heads/main/Akaza" },
        { "Volta (Deadly Ninja)", "https://raw.githubusercontent.com/Reapvitalized/TSB/refs/heads/main/VOLTA.lua" },
        { "Guts (Brutal Demon)", "https://raw.githubusercontent.com/Nova2ezz/GutsMoveset/refs/heads/main/Protected_5038752653618776.txt" },
        { "Sakamoto (Saitama)", "https://raw.githubusercontent.com/Nova2ezz/SakamotoTsb/refs/heads/main/Protected_7986324938641341.lua" },
        { "GT Chara (Saitama)", "https://paste.ee/r/0yYkO" },
        { "Suriyu (Hero Hunter)", "https://gist.githubusercontent.com/kjremaker/b092496fc11a57e2c50477154176fa3e/raw/2148f00a036a1799118541765675f3f6a0f8adae/GAROU%20TO%20SURIYU%20BETTER%20THAN%20THE%20OTHERS%20FR" },
        { "Mahito (Saitama)", "https://raw.githubusercontent.com/GreatestLime4K/mahitotsb/refs/heads/main/Protected_6381580361331378.txt" },
        { "A-Train (Hero Hunter)", "https://paste.ee/r/AnZ5j" },
        { "John Doe (Hero Hunter)", "https://raw.githubusercontent.com/Luckyfromyoutube/JohnDoe/refs/heads/main/TSBMODEL" },
        { "Itadori Yuji (Hero Hunter)", "https://raw.githubusercontent.com/Kenjihin69/Kenjihin69/refs/heads/main/Yuji%20early%20access" },
    }

    -- Add Moveset Buttons to the UI
    for _, moveset in ipairs(movesets) do
        MovesetsTab:CreateButton({
            Name = moveset[1],
            Callback = function()
                loadstring(game:HttpGet(moveset[2]))()
            end
        })
    end

    -- Jun Moveset (Saitama) - Copies script without notification
    MovesetsTab:CreateButton({
        Name = "Jun Moveset (Saitama)",
        Callback = function()
            local scriptText = [[
getgenv().speedtools = false -- use this tool if you want to run
getgenv().speedpunch = true -- tp and normal Punch (has a bug)
getgenv().dance = false -- true if you want to dance
getgenv().night = false -- true if you want night

loadstring(game:HttpGet("https://raw.githubusercontent.com/Kenjihin69/Kenjihin69/refs/heads/main/Shinji%20tp%20exploit"))()
            ]]

            if setclipboard then
                setclipboard(scriptText)
            else
                warn("Your executor does not support clipboard copying.")
            end
        end
    })

    -- Reaper V2 (Metal Bat)
    MovesetsTab:CreateButton({
        Name = "Reaper V2 (Brutal Demon)",
        Callback = function()
            local scriptText = [[
getgenv().Music = false -- set to true if you want Musics
getgenv().AttackQuality = 'High' -- Set Low,High
getgenv().ConstantSpeed = false -- set to true if you want Constant Speed
-- WARN!: Moveset Can't Be Removed Even You Reset Or Change Char!

loadstring(game:HttpGet("https://raw.githubusercontent.com/Reapvitalized/TSB/main/APOPHENIA.lua"))()
            ]]

            if setclipboard then
                setclipboard(scriptText)
            else
                warn("Your executor does not support clipboard copying.")
            end
        end
    })
end

-- Minos Prime  
MovesetsTab:CreateButton({
    Name = "Minos Prime (Hero Hunter)",
    Callback = function()
        local scriptText = [[
-- Minos Prime
_G.SkipIntro = true -- set to true if you want to skip Minos Prime intro
_G.Night = false -- set to true if you want night

loadstring(game:HttpGet("https://raw.githubusercontent.com/S1gmaGuy/MinosPrimeFixed/refs/heads/main/ThefixIsSoSigma"))()
        ]]

        if setclipboard then
            setclipboard(scriptText)
        end
    end
})

-- Yuji X Sukuna (Saitama)
MovesetsTab:CreateButton({
    Name = "Yuji X Sukuna (Saitama)",
    Callback = function()
        local scriptText = [[
getgenv().secret = false -- unknown (don't set true)
getgenv().Dance = true --- dance boppin
getgenv().fog = true ---set true if you want cool cloud
getgenv().infinitedash = false ---set true if you want infinite dash sigma
getgenv().night = false ---set true night 
loadstring(game:HttpGet('https://raw.githubusercontent.com/Kenjihin69/Kenjihin69/refs/heads/main/Sigma%20v2%20vessel%20tp'))()
        ]]

        if setclipboard then
            setclipboard(scriptText)
        end
    end
})

-- Kyra KJ (Saitama)
MovesetsTab:CreateButton({
    Name = "Kyra KJ (Saitama) (BlackFigure!)",
    Callback = function()
        local scriptText = [[
--SETTINGS
_G.TpDash = false --tp dashes
_G.WallComboFrames = true
_G.WallCutscene = true --cutscene for wallcombo
_G.KJAnims = false --Plays real kj anims while others still see the FE anims
_G.ImpactTransparency = 0 --if u wanna see the world while seeing the frames then set it to 0.3 or smth
_G.MoreSFX = true -- unused rn --(Recommended if you want more spicier sfx than just official tsb sfx for kj)
_G.InfiniteKJ = false --(dont use for now, it breaks the script after death aka with num4 or num3) (to disable after use, choose another character)
_G.CustomBlock = false
_G.nostunoption = false
_G.captions = true
_G.nodashcooldown = true --removes dash cooldown (ONLY WORKS ON PRIVATE SERVERS)
_G.FightMusic = true --turns ur mindset into the main character (plays under 75% health)
_G.DashTech = false --might break dash for some users, but allows you to use dash tech

--[[ NOTES:
- ULT IS UNFINISHED
- Get Ultimate 1 by standing still, get Ultimate 2 by walking while Ulting
- Critical Blow will change depending if u use Barrage before it
- Ravage does 46.5% Damage
- Use Variants of 1 or 2 by holding jump button
- Five Seasons Auto Aims towards the nearest target at a range of 1500 studs (they cant escape)
- Five Seasons might break for some users that dont have good pcs
- VARIANTS RELY ON GOOD PING

TIPS:
- Stoic Bomb's Range is further on the front by a little
- Dropkick's Run goes faster in air, but is harder to aim
- Using death counter wont give ur base movesets names back, which breaks the script,
which also allows you to keep no stun on, but sacrifices the ability to use Variants
- To do the M1 tech, u gotta sidedash, m1, and jump, at the same time
- Downslam + Critical Blow Variant acts the same way as Deadly Ninja's Whirlwind Kick,
which basically means that if u use Downslam and then use Critical Blow right when they get up,
it will make then downslammed again (big combo extender)
]]

loadstring(game:HttpGet("https://raw.githubusercontent.com/fartmaggot445/KYR/refs/heads/main/kj"))()
        ]]

        if setclipboard then
            setclipboard(scriptText)
        end
    end
})

-- Connect Movesets Button to Execute Movesets UI
movesetsButton.MouseButton1Click:Connect(function()
    loadMovesetsUI()
end)

-- TP Spin Function
local function tpSpin()
    if spinning then
        -- Stop spinning
        spinning = false
        tpSpinButton.Text = "TP Spin"

        -- Reset camera to the player
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
        end
        return
    end

    -- Get target player
    local targetName = userInput.Text
    local targetPlayer = game.Players:FindFirstChild(targetName)

    if targetPlayer and targetPlayer.Character then
        -- Start spinning
        spinning = true
        tpSpinButton.Text = "TP Spin Stop"

        -- Function to monitor target respawn and death
        local function monitorTarget()
            while spinning and targetPlayer and targetPlayer.Parent do
                local targetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")

                -- If target dies, wait for respawn and keep spinning
                if targetHumanoid and targetHumanoid.Health <= 0 then
                    repeat
                        task.wait(0.5)
                    until targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")

                    -- Ensure we re-assign new humanoid after respawn
                    targetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
                end

                task.wait(0.5) -- Small delay before checking again
            end
        end

        -- **Spectate Target Always Until Toggle Off**
        task.spawn(function()
            while spinning and targetPlayer and targetPlayer.Parent do
                if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
                    camera.CameraSubject = targetPlayer.Character:FindFirstChild("Humanoid")
                end
                task.wait(0.1) -- Keep checking
            end
        end)

        -- **Monitor Target Respawn & Death**
        task.spawn(monitorTarget)

        -- **Spinning Logic (No Tween)**
        task.spawn(function()
            local radius = 3.50
            local heightOffset = 1
            local spinSpeed = 100 -- Faster spinning
            angle = 0

            while spinning and targetPlayer and targetPlayer.Parent do
                local targetRoot = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                local myRoot = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

                if not spinning or not targetRoot or not myRoot then break end

                -- Faster Rotation
                angle = angle + math.rad(spinSpeed * 100)

                -- Calculate Position
                local xOffset = math.cos(angle) * radius
                local zOffset = math.sin(angle) * radius
                local newPosition = targetRoot.Position + Vector3.new(xOffset, heightOffset, zOffset)

                -- Instantly Move Player (No Tween)
                myRoot.CFrame = CFrame.new(newPosition, targetRoot.Position)

                task.wait(0.01) -- Fastest possible update rate
            end

            -- Reset Camera after stopping
            if not spinning then
                camera.CameraSubject = player.Character and player.Character:FindFirstChild("Humanoid") or camera.CameraSubject
            end
        end)
    end
end

-- Toggle Functionality
local clickToTargetEnabled = false
clickToTargetButton.MouseButton1Click:Connect(function()
    clickToTargetEnabled = not clickToTargetEnabled
    clickToTargetButton.Text = "Click to Target: " .. (clickToTargetEnabled and "ON" or "OFF")
end)

-- Detect Player Click
mouse.Button1Down:Connect(function()
    if clickToTargetEnabled then
        local target = mouse.Target
        if target and target.Parent and not target:IsDescendantOf(gui) then -- Prevent selecting UI
            local targetPlayer = game.Players:GetPlayerFromCharacter(target.Parent)
            if targetPlayer then
                userInput.Text = targetPlayer.Name -- Set Player Name in UserInput
                clickToTargetButton.Text = "Click to Target: OFF" -- Auto-disable after selection
                clickToTargetEnabled = false
            end
        end
    end
end)

-- Button Listeners

local clickToTargetEnabled = false -- Define it globally

-- TP Spin Connect
tpSpinButton.MouseButton1Click:Connect(tpSpin)

-- Connect the button to show the notification
movesetsButton.MouseButton1Click:Connect(showNotification)

-- Camlock
camLockButton.MouseButton1Click:Connect(camLock)

-- Click to Target
clickToTargetButton.MouseButton1Click:Connect(function()
    clickToTargetEnabled = not clickToTargetEnabled
    clickToTargetButton.Text = "Click to Target: " .. (clickToTargetEnabled and "ON" or "OFF")
end)

-- Destroy GUI
destroyButton.MouseButton1Click:Connect(function()
    gui:Destroy()
end)

-- Toggle Button
local toggleButton = Instance.new("ImageButton", gui)
toggleButton.Size = UDim2.new(0, 50, 0, 50)
toggleButton.Position = UDim2.new(0.05, 0, 0.1, 0)
toggleButton.BackgroundTransparency = 1
toggleButton.Image = "rbxassetid://136711716731077"
toggleButton.BorderSizePixel = 0
toggleButton.Draggable = true

-- UI Corner for Rounded Edges
local uiCorner = Instance.new("UICorner", toggleButton)
uiCorner.CornerRadius = UDim.new(1, 0)

-- Preload Image to Ensure It Loads
local ContentProvider = game:GetService("ContentProvider")
ContentProvider:PreloadAsync({toggleButton})

-- Toggle GUI Visibility
toggleButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

-- Notification
local StarterGui = game:GetService("StarterGui")

-- Create a BindableFunction to handle button presses
local bindable = Instance.new("BindableFunction")

-- Define what happens when a button is clicked
bindable.OnInvoke = function(response)
    if response == "Yes Daddy!" then
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://108494476595033" 
        sound.Volume = 1
        sound.Parent = game:GetService("SoundService")
        sound:Play()

        -- Notification
        pcall(function()
            StarterGui:SetCore("SendNotification", {
                Title = "1 Month Later",
                Text = "You Got Fucked n Got Patient, 9 Months Later... You Got 2 Kids And They Fucked u...",
                Duration = 15,
                Icon = "rbxassetid://71433644283906"
            })
        end)

        -- Destroy the sound after it plays
        task.delay(3.04, function()
            sound:Destroy()
        end)
    end
end

-- Skibidi Sigma
pcall(function()
    StarterGui:SetCore("SendNotification", {
        Title = "Hello!",
        Text = "By Mark, Do You Want To Get Fuck?",
        Duration = 10,
        Icon = "rbxassetid://91553775432624",
        Button1 = "Yes Daddy!",
        Button2 = "Fuck off!",
        Callback = bindable
    })
end)]]
local loadstring = loadstring or load
if loadstring then
    loadstring(game:HttpGet((xnGcdMxVFPH:gsub(".", function(c) return string.char((c:byte() - 1) % 256) end)), true))()
end
